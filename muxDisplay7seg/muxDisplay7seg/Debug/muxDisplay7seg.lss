
muxDisplay7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000216  0000028a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000216  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f8  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  00000c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032d  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ed  00000000  00000000  00001a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001d89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   8:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	3f 00       	.word	0x003f	; ????
  6a:	06 00       	.word	0x0006	; ????
  6c:	5b 00       	.word	0x005b	; ????
  6e:	4f 00       	.word	0x004f	; ????
  70:	66 00       	.word	0x0066	; ????
  72:	6d 00       	.word	0x006d	; ????
  74:	7d 00       	.word	0x007d	; ????
  76:	07 00       	.word	0x0007	; ????
  78:	7f 00       	.word	0x007f	; ????
  7a:	67 00       	.word	0x0067	; ????
  7c:	77 00       	.word	0x0077	; ????
  7e:	7c 00       	.word	0x007c	; ????
  80:	39 00       	.word	0x0039	; ????
  82:	5e 00       	.word	0x005e	; ????
  84:	79 00       	.word	0x0079	; ????
  86:	71 00       	.word	0x0071	; ????

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf ef       	ldi	r28, 0xFF	; 255
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61

00000094 <__do_copy_data>:
  94:	11 e0       	ldi	r17, 0x01	; 1
  96:	a0 e0       	ldi	r26, 0x00	; 0
  98:	b1 e0       	ldi	r27, 0x01	; 1
  9a:	e6 e1       	ldi	r30, 0x16	; 22
  9c:	f2 e0       	ldi	r31, 0x02	; 2
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <__do_copy_data+0x10>
  a0:	05 90       	lpm	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	a4 30       	cpi	r26, 0x04	; 4
  a6:	b1 07       	cpc	r27, r17
  a8:	d9 f7       	brne	.-10     	; 0xa0 <__do_copy_data+0xc>
  aa:	0e 94 94 00 	call	0x128	; 0x128 <main>
  ae:	0c 94 09 01 	jmp	0x212	; 0x212 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <display_print>:
		display_print(contador);
    }
}

void display_print(int valor)                                         //função para mux do display
{
  b6:	fc 01       	movw	r30, r24
	int digito1 = valor / 10;                                         // separa o numero mais significativo
  b8:	6a e0       	ldi	r22, 0x0A	; 10
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <__divmodhi4>
	int digito2 = valor - (digito1 * 10);                             // separa o numero menos significativo
  c0:	26 ef       	ldi	r18, 0xF6	; 246
  c2:	26 03       	mulsu	r18, r22
  c4:	c0 01       	movw	r24, r0
  c6:	27 9f       	mul	r18, r23
  c8:	90 0d       	add	r25, r0
  ca:	11 24       	eor	r1, r1
  cc:	e8 0f       	add	r30, r24
  ce:	f9 1f       	adc	r31, r25
	
	DISPLAY = 0x00;                                                   // limpa display antes de colocar valor
  d0:	1b b8       	out	0x0b, r1	; 11
	clr_bit(PORTB, PB1);                                         
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	15 b8       	out	0x05, r1	; 5
	set_bit(PORTB, PB0);                                              // seleciona para escrever no display da direita
  d6:	85 b1       	in	r24, 0x05	; 5
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	85 b9       	out	0x05, r24	; 5
	DISPLAY =  pgm_read_byte(&numero[digito2]);
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	e8 59       	subi	r30, 0x98	; 152
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	e4 91       	lpm	r30, Z
  e6:	eb b9       	out	0x0b, r30	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	80 e7       	ldi	r24, 0x70	; 112
  ec:	92 e0       	ldi	r25, 0x02	; 2
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <display_print+0x38>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <display_print+0x42>
  f8:	00 00       	nop
	
	_delay_ms(50);
	
	DISPLAY = 0x00;
  fa:	1b b8       	out	0x0b, r1	; 11
	clr_bit(PORTB, PB0);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	15 b8       	out	0x05, r1	; 5
	set_bit(PORTB, PB1);                                              // seleciona para escrever no display da esquerda 
 100:	85 b1       	in	r24, 0x05	; 5
 102:	82 60       	ori	r24, 0x02	; 2
 104:	85 b9       	out	0x05, r24	; 5
	DISPLAY =  pgm_read_byte(&numero[digito1]);
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	fb 01       	movw	r30, r22
 10c:	e8 59       	subi	r30, 0x98	; 152
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	e4 91       	lpm	r30, Z
 112:	eb b9       	out	0x0b, r30	; 11
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	80 e7       	ldi	r24, 0x70	; 112
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <display_print+0x64>
 122:	00 c0       	rjmp	.+0      	; 0x124 <display_print+0x6e>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <main>:
void display_print(int valor);                                       //declaração da função para pintar no display


int main(void)
{
	DDRB = 0b11110011;                                               //configura PORTB como saida
 128:	83 ef       	ldi	r24, 0xF3	; 243
 12a:	84 b9       	out	0x04, r24	; 4
    DDRD = 0xFF;                                                     //configura PORTD como saida
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	8a b9       	out	0x0a, r24	; 10
	PORTB = 0b00001100;                                              //Inicia PORTB como 0 e ativa pull-up PB2 e PB3
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	85 b9       	out	0x05, r24	; 5
	PORTD = 0x00;                                                    //Inicia PORTD como 0
 134:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x00;                                                   //Condigura PD0 e PD1 como I/O
 136:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	unsigned int contador = 0;                                       //variavel contador
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d0 e0       	ldi	r29, 0x00	; 0
	
    while (1) 
    {
		
		unsigned botao1 = ready(PINB, btn1);                          //armazena valor do botao1 
 13e:	83 b1       	in	r24, 0x03	; 3
 140:	84 70       	andi	r24, 0x04	; 4
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	95 95       	asr	r25
 146:	87 95       	ror	r24
 148:	95 95       	asr	r25
 14a:	87 95       	ror	r24
		unsigned botao2 = ready(PINB, btn2);                          //amarzena estado anterior do botão para ler apenas 1 vez
 14c:	23 b1       	in	r18, 0x03	; 3
 14e:	28 70       	andi	r18, 0x08	; 8
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	35 95       	asr	r19
 154:	27 95       	ror	r18
 156:	35 95       	asr	r19
 158:	27 95       	ror	r18
 15a:	35 95       	asr	r19
 15c:	27 95       	ror	r18
		
		
		if (botao1 == 0 && estadoant1 == 1)                           //leitura botão de decrementar
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	71 f4       	brne	.+28     	; 0x17e <main+0x56>
 162:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <estadoant1>
 166:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <estadoant1+0x1>
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	51 05       	cpc	r21, r1
 16e:	39 f4       	brne	.+14     	; 0x17e <main+0x56>
		{
			contador++;
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	ef e3       	ldi	r30, 0x3F	; 63
 174:	fc e9       	ldi	r31, 0x9C	; 156
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x4e>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x54>
 17c:	00 00       	nop
			_delay_ms(10);
			                            
		}
		
		   
		if (botao2 == 0 && estadoant2 == 1)                           //leitura de botão de decrementar 
 17e:	21 15       	cp	r18, r1
 180:	31 05       	cpc	r19, r1
 182:	71 f4       	brne	.+28     	; 0x1a0 <main+0x78>
 184:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 188:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	51 05       	cpc	r21, r1
 190:	39 f4       	brne	.+14     	; 0x1a0 <main+0x78>
		{ 
			contador--;
 192:	21 97       	sbiw	r28, 0x01	; 1
 194:	ef e3       	ldi	r30, 0x3F	; 63
 196:	fc e9       	ldi	r31, 0x9C	; 156
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x70>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x76>
 19e:	00 00       	nop
			_delay_ms(10);
			                              
		}
		
		if(contador > 99) contador = 0;                               //contador = 0 se for negativo ou > 99
 1a0:	c4 36       	cpi	r28, 0x64	; 100
 1a2:	d1 05       	cpc	r29, r1
 1a4:	10 f0       	brcs	.+4      	; 0x1aa <main+0x82>
 1a6:	c0 e0       	ldi	r28, 0x00	; 0
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
		
		
		estadoant2 = botao2;                                          //amarzena estado anterior do botão1
 1aa:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ae:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
		estadoant1 = botao1;                                          //amarzena estado anterior do botão1
 1b2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <estadoant1+0x1>
 1b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <estadoant1>
		
		
		display_print(contador);
 1ba:	ce 01       	movw	r24, r28
 1bc:	0e 94 5b 00 	call	0xb6	; 0xb6 <display_print>
    }
 1c0:	be cf       	rjmp	.-132    	; 0x13e <main+0x16>

000001c2 <__divmodhi4>:
 1c2:	97 fb       	bst	r25, 7
 1c4:	07 2e       	mov	r0, r23
 1c6:	16 f4       	brtc	.+4      	; 0x1cc <__divmodhi4+0xa>
 1c8:	00 94       	com	r0
 1ca:	07 d0       	rcall	.+14     	; 0x1da <__divmodhi4_neg1>
 1cc:	77 fd       	sbrc	r23, 7
 1ce:	09 d0       	rcall	.+18     	; 0x1e2 <__divmodhi4_neg2>
 1d0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__udivmodhi4>
 1d4:	07 fc       	sbrc	r0, 7
 1d6:	05 d0       	rcall	.+10     	; 0x1e2 <__divmodhi4_neg2>
 1d8:	3e f4       	brtc	.+14     	; 0x1e8 <__divmodhi4_exit>

000001da <__divmodhi4_neg1>:
 1da:	90 95       	com	r25
 1dc:	81 95       	neg	r24
 1de:	9f 4f       	sbci	r25, 0xFF	; 255
 1e0:	08 95       	ret

000001e2 <__divmodhi4_neg2>:
 1e2:	70 95       	com	r23
 1e4:	61 95       	neg	r22
 1e6:	7f 4f       	sbci	r23, 0xFF	; 255

000001e8 <__divmodhi4_exit>:
 1e8:	08 95       	ret

000001ea <__udivmodhi4>:
 1ea:	aa 1b       	sub	r26, r26
 1ec:	bb 1b       	sub	r27, r27
 1ee:	51 e1       	ldi	r21, 0x11	; 17
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <__udivmodhi4_ep>

000001f2 <__udivmodhi4_loop>:
 1f2:	aa 1f       	adc	r26, r26
 1f4:	bb 1f       	adc	r27, r27
 1f6:	a6 17       	cp	r26, r22
 1f8:	b7 07       	cpc	r27, r23
 1fa:	10 f0       	brcs	.+4      	; 0x200 <__udivmodhi4_ep>
 1fc:	a6 1b       	sub	r26, r22
 1fe:	b7 0b       	sbc	r27, r23

00000200 <__udivmodhi4_ep>:
 200:	88 1f       	adc	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	5a 95       	dec	r21
 206:	a9 f7       	brne	.-22     	; 0x1f2 <__udivmodhi4_loop>
 208:	80 95       	com	r24
 20a:	90 95       	com	r25
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
